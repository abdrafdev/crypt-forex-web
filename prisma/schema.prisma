// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique  // Make sure this line has @unique
  password  String   
  firstName String?  
  lastName  String?  
  name      String?  
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations for NextAuth
  accounts      Account[]
  sessions      Session[]
  
  // Relations
  trades    Trade[]
  watchlist WatchlistItem[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trade {
  id          String      @id @default(cuid())
  userId      String
  symbol      String
  type        TradeType
  amount      Decimal     @db.Decimal(18, 8)
  price       Decimal     @db.Decimal(18, 8)
  total       Decimal     @db.Decimal(18, 8)
  status      TradeStatus @default(PENDING)
  executedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trades")
}

model WatchlistItem {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("watchlist_items")
}

model CryptoPrice {
  id        String   @id @default(cuid())
  symbol    String
  price     Decimal  @db.Decimal(18, 8)
  change24h Decimal  @db.Decimal(10, 4)
  volume24h Decimal  @db.Decimal(20, 8)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([symbol])
  @@map("crypto_prices")
}

enum TradeType {
  BUY
  SELL
}

enum TradeStatus {
  PENDING
  EXECUTED
  CANCELLED
  FAILED
}